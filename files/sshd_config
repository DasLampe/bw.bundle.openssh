#	$OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

Include /etc/ssh/sshd_config.d/*.conf

% if node.metadata.get('openssh', {}).get('port', False):
Port ${node.metadata['openssh']['port']}
% else:
#Port 22
% endif
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

% if node.metadata.get('openssh', {}).get('sign_host_key', {}):
% for key_format in node.metadata.get('openssh').get('sign_host_key').get('formats', ['ed25519', 'ecdsa']):
HostKey /etc/ssh/ssh_host_${key_format}_key
HostCertificate /etc/ssh/ssh_host_${key_format}_key-cert.pub
% endfor
% endif

# Ciphers and keying
#RekeyLimit default none
% if node.metadata.get('openssh', {}).get('only_allow_secure_ciphers', True):
# save algorithms ath ciphers
KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com
% endif

# Logging
#SyslogFacility AUTH
#LogLevel INFO

# Authentication:

#LoginGraceTime 2m
% if node.metadata.get('openssh', {}).get('permit_root_login', False):
PermitRootLogin yes
% else:
PermitRootLogin no
% endif
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

#PubkeyAuthentication yes

# Expect .ssh/authorized_keys2 to be disregarded by default in future.
AuthorizedKeysFile      %h/.ssh/authorized_keys

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
% if node.metadata.get('openssh', {}).get('password_auth', False):
PasswordAuthentication yes
% else:
PasswordAuthentication no
% endif
#PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
% if node.metadata.get('openssh', {}).get('password_auth', False):
ChallengeResponseAuthentication yes
% else:
ChallengeResponseAuthentication no
% endif


# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes
#GSSAPIStrictAcceptorCheck yes
#GSSAPIKeyExchange no

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
% if node.metadata.get('openssh', {}).get('use_pam', False):
UsePAM yes
% else:
UsePAM no
% endif


#AllowAgentForwarding yes
#AllowTcpForwarding yes
% if node.metadata.get('openssh', {}).get('gateway_ports', False):
GatewayPorts yes
% else:
#GatewayPorts no
% endif
% if node.metadata.get('openssh', {}).get('x11', False):
X11Forwarding yes
% else:
X11Forwarding no
% endif
#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
% if node.metadata.get('openssh', {}).get('print_motd', True):
PrintMotd yes
% else:
PrintMotd no
% endif
#PrintLastLog yes
#TCPKeepAlive yes
#PermitUserEnvironment no
#Compression delayed
#ClientAliveInterval 0
#ClientAliveCountMax 3
% if node.metadata.get('openssh', {}).get('use_dns', False):
UseDNS yes
% else:
#UseDNS no
% endif
#PidFile /var/run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*

# override default of no subsystems
% if node.in_group("ubuntu"):
Subsystem sftp internal-sftp

Match Group sftp
        ChrootDirectory %h
        ForceCommand internal-sftp
        AllowTcpForwarding no
% else:
Subsystem	sftp	/usr/lib/openssh/sftp-server
% endif

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server

